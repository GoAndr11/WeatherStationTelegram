#ifdef ESP32
#include "WiFi.h"
#include "EEPROM.h"
#else
#include "ESP8266WiFi.h"
#include "EEPROM.h"
#endif

#include "WiFiClientSecure.h"
#include "UniversalTelegramBot.h"
#include "ArduinoJson.h"
#include "Adafruit_BME280.h"
#include "Adafruit_Sensor.h"

// –í–∫–∞–∂—ñ—Ç—å –≤–∞—à—ñ –¥–∞–Ω—ñ Wi-Fi
const char* ssid = "SSID";
const char* password = "Password";
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ @myidbot –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
#define CHAT_ID "userChat_ID"
// –í–∫–∞–∂—ñ—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
#define BOTtoken "You_bot_token"

#ifdef ESP8266
X509List cert(TELEGRAM_CERTIFICATE_ROOT);
#endif

WiFiClientSecure client;
UniversalTelegramBot bot(BOTtoken, client);

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É
int botRequestDelay = 1000;
unsigned long lastTimeBotRan;

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –¥–∞—Ç—á–∏–∫–∞ BME280
Adafruit_BME280 bme;

struct TempData {
  float maxTemp;
  float minTemp;
  char maxTime[20];
  char minTime[20];
  float temps[30];  // –î–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –∑–∞ 30 –¥–Ω—ñ–≤
  unsigned long timestamps[30];  // –ß–∞—Å–æ–≤—ñ –º—ñ—Ç–∫–∏ –¥–ª—è 30 –¥–Ω—ñ–≤
  int dayIndex;  // –Ü–Ω–¥–µ–∫—Å –¥–ª—è —Ü–∏–∫–ª—ñ—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
  bool isInitialized;  // –ü—Ä–∞–ø–æ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
};

// –î–∞–Ω—ñ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏, –≤–æ–ª–æ–≥–æ—Å—Ç—ñ —Ç–∞ —Ç–∏—Å–∫—É
TempData daily, weekly, monthly;

const int EEPROM_SIZE = sizeof(TempData) * 3;
unsigned long lastTempCheck = 0;
const int tempCheckInterval = 10000;  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥
unsigned long lastEEPROMsave = 0;
const int eepromSaveInterval = 3600000;  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ EEPROM —Ä–∞–∑ –Ω–∞ –≥–æ–¥–∏–Ω—É (3600 —Å–µ–∫—É–Ω–¥)

void saveTempData(int address, TempData &data) {
  EEPROM.put(address, data);
  EEPROM.commit();
}

void loadTempData(int address, TempData &data) {
  EEPROM.get(address, data);
  if (!data.isInitialized || isnan(data.maxTemp) || isnan(data.minTemp)) {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    data.maxTemp = -1000.0;
    data.minTemp = 1000.0;
    strcpy(data.maxTime, "");
    strcpy(data.minTime, "");
    data.dayIndex = 0;
    for (int i = 0; i < 30; i++) {
      data.temps[i] = 0.0;
      data.timestamps[i] = 0;
    }
    data.isInitialized = true;
    saveTempData(address, data);  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
  }
}

String getTime() {
  time_t now;
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    return "";
  }
  char timeString[20];
  strftime(timeString, sizeof(timeString), "%Y-%m-%d %H:%M:%S", &timeinfo);
  return String(timeString);
}

void updateTempData(TempData &data, int address) {
  float temperature = bme.readTemperature();
  String currentTime = getTime();
  bool shouldSave = false;

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ –∑–∞ 30 –¥–Ω—ñ–≤
  data.temps[data.dayIndex] = temperature;
  data.timestamps[data.dayIndex] = millis();  // –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
  data.dayIndex = (data.dayIndex + 1) % 30;  // –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –¥–Ω—è (—Ü–∏–∫–ª—ñ—á–Ω–æ)

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏—Ö —Ç–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
  if (temperature > data.maxTemp) {
    data.maxTemp = temperature;
    currentTime.toCharArray(data.maxTime, 20);
    shouldSave = true;  // –ó–º—ñ–Ω–∞ –º–∞–∫—Å–∏–º—É–º—É - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
  }
  if (temperature < data.minTemp) {
    data.minTemp = temperature;
    currentTime.toCharArray(data.minTime, 20);
    shouldSave = true;  // –ó–º—ñ–Ω–∞ –º—ñ–Ω—ñ–º—É–º—É - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
  }

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ EEPROM –ª–∏—à–µ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∞–±–æ —Ä–∞–∑ –Ω–∞ –≥–æ–¥–∏–Ω—É
  if (shouldSave || (millis() - lastEEPROMsave > eepromSaveInterval)) {
    saveTempData(address, data);
    lastEEPROMsave = millis();
  }
}

String getReadings() {
  float temperature = bme.readTemperature();
  float humidity = bme.readHumidity();
  float pressure = bme.readPressure() / 100.0F; // –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏—Å–∫—É –≤ –≥–ü–∞

  // –Ø–∫—â–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ <= 0, –¥–æ–¥–∞—î–º–æ —Å–Ω—ñ–∂–∏–Ω–∫—É ‚ùÑÔ∏è
  String temperatureEmoji = "üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–≤—ñ—Ç—Ä—è: *" + String(temperature) + "* ¬∫C";
  if (temperature <= 0) {
    temperatureEmoji += " ‚ùÑÔ∏è";  // –î–æ–¥–∞—î–º–æ —Å–Ω—ñ–∂–∏–Ω–∫—É
  }
  // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  String message = temperatureEmoji + "\n";
  message += "üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è: *" + String(humidity) + "* %\n";
  message += "üå¨Ô∏è –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–∏–π —Ç–∏—Å–∫: *" + String(pressure) + "* –≥–ü–∞ (" + String(pressure * 0.750062) + " –º–º —Ä—Ç. —Å—Ç.)\n";

  return message;
}

void handleNewMessages(int numNewMessages) {
  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = String(bot.messages[i].chat_id);
    String text = bot.messages[i].text;
    String from_name = bot.messages[i].from_name;

    if (text == "/start") {
      String welcome = "üëã –í—ñ—Ç–∞—é, " + from_name + ".\n";
      welcome += "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö:\n\n";
      welcome += "üå°Ô∏è /temp - –ø–æ—Ç–æ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏, –≤–æ–ª–æ–≥–æ—Å—Ç—ñ —Ç–∞ —Ç–∏—Å–∫—É –ø–æ–≤—ñ—Ç—Ä—è\n";
      welcome += "üìä /tempd - –Ω–∞–π–≤–∏—â–∞ —Ç–∞ –Ω–∞–π–Ω–∏–∂—á–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–≤—ñ—Ç—Ä—è –∑–∞ –¥–µ–Ω—å\n";
      welcome += "üìä /tempw - –Ω–∞–π–≤–∏—â–∞ —Ç–∞ –Ω–∞–π–Ω–∏–∂—á–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–≤—ñ—Ç—Ä—è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤\n";
      welcome += "üìä /tempm - –Ω–∞–π–≤–∏—â–∞ —Ç–∞ –Ω–∞–π–Ω–∏–∂—á–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–≤—ñ—Ç—Ä—è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤\n";
      
      // –î–æ–¥–∞—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –æ—á–∏—â–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (chat_id == CHAT_ID) {
        welcome += "üßπ /cleartempd - –æ—á–∏—Å—Ç–∏—Ç–∏ –¥–∞–Ω—ñ –∑–∞ –¥–µ–Ω—å (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä)\n";
        welcome += "üßπ /cleartempw - –æ—á–∏—Å—Ç–∏—Ç–∏ –¥–∞–Ω—ñ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä)\n";
        welcome += "üßπ /cleartempm - –æ—á–∏—Å—Ç–∏—Ç–∏ –¥–∞–Ω—ñ –∑–∞ –º—ñ—Å—è—Ü—å (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä)";
      }
      
      bot.sendMessage(chat_id, welcome, "");
    }

    if (text == "/temp") {
      String readings = getReadings();
      bot.sendMessage(chat_id, "üìä –ü–æ–∫–∞–∑–Ω–∏–∫–∏ —Å—Ç–∞–Ω–æ–º –Ω–∞ –∑–∞—Ä–∞–∑:\n" + readings, "Markdown");
    }

    if (text == "/tempd") {
      String response = "‚¨ÜÔ∏è –ù–∞–π–≤–∏—â–∞ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –¥–µ–Ω—å: *" + String(daily.maxTemp) + "* ¬∫C\n";
      response += "üìå –ó–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ: " + String(daily.maxTime) + "\n\n";
      response += "‚¨áÔ∏è –ù–∞–π–Ω–∏–∂—á–∞ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –¥–µ–Ω—å: *" + String(daily.minTemp) + "* ¬∫C\n";
      response += "üìå –ó–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ: " + String(daily.minTime);
      bot.sendMessage(chat_id, response, "Markdown");
    }

    if (text == "/tempw") {
      String response = "‚¨ÜÔ∏è –ù–∞–π–≤–∏—â–∞ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤: *" + String(weekly.maxTemp) + "* ¬∫C\n";
      response += "üìå –ó–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ: " + String(weekly.maxTime) + "\n\n";
      response += "‚¨áÔ∏è –ù–∞–π–Ω–∏–∂—á–∞ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤: *" + String(weekly.minTemp) + "* ¬∫C\n";
      response += "üìå –ó–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ: " + String(weekly.minTime);
      bot.sendMessage(chat_id, response, "Markdown");
    }

    if (text == "/tempm") {
      String response = "‚¨ÜÔ∏è –ù–∞–π–≤–∏—â–∞ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤: *" + String(monthly.maxTemp) + "* ¬∫C\n";
      response += "üìå –ó–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ: " + String(monthly.maxTime) + "\n\n";
      response += "‚¨áÔ∏è –ù–∞–π–Ω–∏–∂—á–∞ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤: *" + String(monthly.minTemp) + "* ¬∫C\n";
      response += "üìå –ó–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ: " + String(monthly.minTime);
      bot.sendMessage(chat_id, response, "Markdown");
    }

    if (chat_id == CHAT_ID) {
      if (text == "/cleartempd") {
        daily.maxTemp = -1000.0;
        daily.minTemp = 1000.0;
        strcpy(daily.maxTime, "");
        strcpy(daily.minTime, "");
        saveTempData(0, daily);
        bot.sendMessage(chat_id, "üßπ –î–∞–Ω—ñ –∑–∞ –¥–µ–Ω—å –æ—á–∏—â–µ–Ω–æ.", "");
      }

      if (text == "/cleartempw") {
        weekly.maxTemp = -1000.0;
        weekly.minTemp = 1000.0;
        strcpy(weekly.maxTime, "");
        strcpy(weekly.minTime, "");
        saveTempData(sizeof(TempData), weekly);
        bot.sendMessage(chat_id, "üßπ –î–∞–Ω—ñ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å –æ—á–∏—â–µ–Ω–æ.", "");
      }

      if (text == "/cleartempm") {
        monthly.maxTemp = -1000.0;
        monthly.minTemp = 1000.0;
        strcpy(monthly.maxTime, "");
        strcpy(monthly.minTime, "");
        saveTempData(sizeof(TempData) * 2, monthly);
        bot.sendMessage(chat_id, "üßπ –î–∞–Ω—ñ –∑–∞ –º—ñ—Å—è—Ü—å –æ—á–∏—â–µ–Ω–æ.", "");
      }
    } else if (text.startsWith("/clear")) {
      bot.sendMessage(chat_id, "‚ùå –í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏ üôà", "");
    }
  }
}

void setup() {
  Serial.begin(115200);

#ifdef ESP8266
  configTime(2 * 3600, 0, "0.ua.pool.ntp.org"); // –û—Ç—Ä–∏–º—É—î–º–æ —á–∞—Å —á–µ—Ä–µ–∑ NTP
  client.setTrustAnchors(&cert); // –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç –¥–ª—è Telegram
#endif

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞—Ç—á–∏–∫–∞
  if (!bme.begin(0x76)) {
    Serial.println("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ –¥–∞—Ç—á–∏–∫!");
    while (true);
  }

  // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Wi-Fi
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

#ifdef ESP32
  client.setCACert(TELEGRAM_CERTIFICATE_ROOT); // –î–æ–¥–∞—î–º–æ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç –¥–ª—è Telegram
#endif

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Wi-Fi...");
  }

  EEPROM.begin(EEPROM_SIZE);
  loadTempData(0, daily);
  loadTempData(sizeof(TempData), weekly);
  loadTempData(sizeof(TempData) * 2, monthly);
}

void loop() {
  if (millis() > lastTempCheck + tempCheckInterval) {
    updateTempData(daily, 0);
    updateTempData(weekly, sizeof(TempData));
    updateTempData(monthly, sizeof(TempData) * 2);
    lastTempCheck = millis();
  }

  int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
  while (numNewMessages) {
    handleNewMessages(numNewMessages);
    numNewMessages = bot.getUpdates(bot.last_message_received + 1);
  }
}
